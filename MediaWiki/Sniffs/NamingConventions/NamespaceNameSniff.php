<?php

namespace MediaWiki\Sniffs\NamingConventions;

use PHP_CodeSniffer\Files\File;
use PHP_CodeSniffer\Sniffs\Sniff;
use PHP_CodeSniffer\Util\Tokens;

/**
 * Make sure namespace names follow some naming conventition
 */
class NamespaceNameSniff implements Sniff {

	/**
	 * @inheritDoc
	 */
	public function register(): array {
		return [ T_NAMESPACE ];
	}

	/**
	 * @param File $phpcsFile
	 * @param int $stackPtr The current token index.
	 * @return void
	 */
	public function process( File $phpcsFile, $stackPtr ) {
		$tokens = $phpcsFile->getTokens();

		$namespaceToken = $phpcsFile->findNext( Tokens::$emptyTokens, $stackPtr + 1, null, true );
		if ( $namespaceToken === false || $tokens[$namespaceToken]['code'] !== T_STRING ) {
			// live coding or global namespace
			return;
		}

		$skip = Tokens::$emptyTokens;
		$skip[] = T_STRING;
		$skip[] = T_NS_SEPARATOR;
		$end = $phpcsFile->findNext( $skip, $namespaceToken + 1, null, true );
		if ( $end === false ) {
			// live coding
			return;
		}

		$namespaceName = trim( $phpcsFile->getTokensAsString( $namespaceToken, $end - $namespaceToken ) );
		if ( !str_starts_with( $namespaceName, 'MediaWiki\\' ) ) {
			$lowerNamespaceName = strtolower( $namespaceName );
			if ( str_starts_with( $lowerNamespaceName, 'phpunit\\' ) ||
				str_starts_with( $lowerNamespaceName, 'extensions\\' ) ||
				str_starts_with( $lowerNamespaceName, 'skins\\' )
			) {
				$phpcsFile->addError(
					'Namespace "%s" looks like auto-generated by IDE, use appropriate namespace.',
					$stackPtr,
					'AutoGenerated',
					[ $namespaceName ]
				);

				// No further checks as the whole namespace needs adjustment
				return;
			}

			if ( str_starts_with( $lowerNamespaceName, 'mediawiki\\' ) ) {
				$phpcsFile->addError(
					'Wrong casing for namespace "%s".',
					$stackPtr,
					'MediaWikiCasing',
					[ $namespaceName ]
				);
			}
		}

		if ( str_contains( $namespaceName, '_' ) ) {
			$phpcsFile->addError(
				'Namespace "%s" should use camel case, not underscores.',
				$stackPtr,
				'NamespaceUnderscore',
				[ $namespaceName ]
			);
		}

		if ( preg_match( '/^[a-z]/', $namespaceName ) ) {
			$phpcsFile->addError(
				'Namespace "%s" should use upper case letter to start top-level namespace.',
				$stackPtr,
				'NamespaceTopUpperCamelCase',
				[ $namespaceName ]
			);
		}

		if ( preg_match( '/\\\\[a-z]/', $namespaceName ) ) {
			$phpcsFile->addError(
				'Namespace "%s" should use upper case letter to start sub-namespace.',
				$stackPtr,
				'NamespaceSubUpperCamelCase',
				[ $namespaceName ]
			);
		}
	}
}
